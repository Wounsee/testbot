import asyncio
import json
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ ---
BOT_TOKEN = "8338120116:AAH8WfZuQR19ga4NU9WR4steHtrcL7q8g1o"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω!
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"), KeyboardButton(text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞")],
        [KeyboardButton(text="üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

training_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")]
    ],
    resize_keyboard=True
)


# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class AddWordState(StatesGroup):
    waiting_for_word = State()
    waiting_for_translation = State()


class DeleteWordState(StatesGroup):
    waiting_for_word = State()


class TrainingState(StatesGroup):
    in_training = State()


# --- –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ ---
DATA_FILE = "user_vocabulary.json"


def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            try:
                return json.load(f)
            except json.JSONDecodeError:
                return {}
    return {}


def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)


def add_word_to_user(user_id, english_word, translation):
    data = load_data()
    if str(user_id) not in data:
        data[str(user_id)] = {}
    data[str(user_id)][english_word.lower()] = translation.lower()
    save_data(data)


def get_user_words(user_id):
    data = load_data()
    return data.get(str(user_id), {})


def delete_user_word(user_id, english_word):
    data = load_data()
    user_data = data.get(str(user_id), {})
    if english_word.lower() in user_data:
        del user_data[english_word.lower()]
        data[str(user_id)] = user_data
        save_data(data)
        return True
    return False


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        "–Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:",
        reply_markup=main_keyboard
    )
    await message.answer(
        "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
        "/show - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞\n"
        "/train - –Ω–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n"
        "/help - –ø–æ–º–æ—â—å"
    )


@dp.message(Command("help"))
@dp.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: types.Message):
    help_text = (
        "üìö <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ:</b>\n"
        "   - –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'\n"
        "   - –ò–ª–∏ –Ω–∞–ø–∏—à–∏ /add\n"
        "   - –§–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥\n\n"
        "üìñ <b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞:</b>\n"
        "   - –ö–Ω–æ–ø–∫–∞ 'üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞'\n"
        "   - –ö–æ–º–∞–Ω–¥–∞ /show\n\n"
        "üéØ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:</b>\n"
        "   - –ö–Ω–æ–ø–∫–∞ 'üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'\n"
        "   - –ö–æ–º–∞–Ω–¥–∞ /train\n\n"
        "‚ùå <b>–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ:</b>\n"
        "   - –ö–Ω–æ–ø–∫–∞ '‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'\n"
        "   - –ö–æ–º–∞–Ω–¥–∞ /delete —Å–ª–æ–≤–æ\n\n"
        "‚ö° <b>–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫–∏!</b>"
    )
    await message.answer(help_text, parse_mode="HTML")


# --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ ---
@dp.message(Command("add"))
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
async def cmd_add(message: types.Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>apple - —è–±–ª–æ–∫–æ</code>",
        parse_mode="HTML",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(AddWordState.waiting_for_word)


@dp.message(AddWordState.waiting_for_word)
async def process_add_word(message: types.Message, state: FSMContext):
    if ' - ' not in message.text:
        await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>—Å–ª–æ–≤–æ - –ø–µ—Ä–µ–≤–æ–¥</code>", parse_mode="HTML")
        return

    english_word, translation = message.text.split(' - ', 1)
    if not english_word.strip() or not translation.strip():
        await message.answer("‚ùå –°–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏")
        return

    add_word_to_user(message.from_user.id, english_word.strip(), translation.strip())
    await message.answer(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{english_word.strip()}</b> - <i>{translation.strip()}</i>",
        parse_mode="HTML",
        reply_markup=main_keyboard
    )
    await state.clear()


# --- –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞ ---
@dp.message(Command("show"))
@dp.message(F.text == "üìñ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞")
async def cmd_show(message: types.Message):
    user_words = get_user_words(message.from_user.id)

    if not user_words:
        await message.answer("üìù –í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'")
        return

    response = "üìö <b>–í–∞—à —Å–ª–æ–≤–∞—Ä—å:</b>\n\n"
    for word, translation in user_words.items():
        response += f"‚Ä¢ <b>{word}</b> - <i>{translation}</i>\n"

    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
    if len(response) > 4000:
        chunks = [response[i:i + 4000] for i in range(0, len(response), 4000)]
        for chunk in chunks:
            await message.answer(chunk, parse_mode="HTML")
    else:
        await message.answer(response, parse_mode="HTML")


# --- –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ ---
@dp.message(Command("delete"))
@dp.message(F.text == "‚ùå –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
async def cmd_delete(message: types.Message, state: FSMContext):
    user_words = get_user_words(message.from_user.id)

    if not user_words:
        await message.answer("üìù –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å - —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç")
        return

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(DeleteWordState.waiting_for_word)


@dp.message(DeleteWordState.waiting_for_word)
async def process_delete_word(message: types.Message, state: FSMContext):
    word_to_delete = message.text.strip().lower()
    success = delete_user_word(message.from_user.id, word_to_delete)

    if success:
        await message.answer(f"‚úÖ –°–ª–æ–≤–æ '<b>{word_to_delete}</b>' —É–¥–∞–ª–µ–Ω–æ", parse_mode="HTML")
    else:
        await message.answer(f"‚ùå –°–ª–æ–≤–æ '<b>{word_to_delete}</b>' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ", parse_mode="HTML")

    await state.clear()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_keyboard)


# --- –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ ---
@dp.message(Command("train"))
@dp.message(F.text == "üéØ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
async def cmd_train(message: types.Message, state: FSMContext):
    user_words = get_user_words(message.from_user.id)

    if not user_words:
        await message.answer("üìù –î–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–∞")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(words=list(user_words.items()))
    await state.update_data(score=0)
    await state.update_data(total=len(user_words))

    await message.answer(
        "üéØ <b>–ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É!</b>\n\n"
        "–Ø –±—É–¥—É –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞, –∞ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥.\n"
        "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ '‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'",
        parse_mode="HTML",
        reply_markup=training_keyboard
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ
    await send_next_word(message, state)
    await state.set_state(TrainingState.in_training)


async def send_next_word(message: types.Message, state: FSMContext):
    data = await state.get_data()
    words = data['words']

    if not words:
        # –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        score = data['score']
        total = data['total']
        await message.answer(
            f"üèÅ <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{score}/{total}</b>\n"
            f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{round(score / total * 100)}%</b>",
            parse_mode="HTML",
            reply_markup=main_keyboard
        )
        await state.clear()
        return

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    current_word, current_translation = words[0]
    await state.update_data(
        current_word=current_word,
        current_translation=current_translation,
        words=words[1:]  # –£–±–∏—Ä–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
    )

    await message.answer(f"üî§ –ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ: <b>{current_word}</b>?", parse_mode="HTML")


@dp.message(TrainingState.in_training)
async def handle_training_answer(message: types.Message, state: FSMContext):
    if message.text == "‚èπÔ∏è –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É":
        data = await state.get_data()
        score = data.get('score', 0)
        total = data.get('total', 0)
        await message.answer(
            f"‚èπÔ∏è <b>–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞</b>\n\n"
            f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: <b>{score}/{total}</b>",
            parse_mode="HTML",
            reply_markup=main_keyboard
        )
        await state.clear()
        return

    data = await state.get_data()
    correct_answer = data['current_translation']
    user_answer = message.text.strip().lower()

    if user_answer == correct_answer:
        await message.answer("‚úÖ <b>–í–µ—Ä–Ω–æ!</b>", parse_mode="HTML")
        await state.update_data(score=data['score'] + 1)
    else:
        await message.answer(f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ!</b>\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <i>{correct_answer}</i>", parse_mode="HTML")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ
    await send_next_word(message, state)


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
